@model PostInspectViewModel;
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;

@{
    ViewData["Title"] = "Inspect Post Page";
    var photoPath = "~/img/uploads/" + Model.Post.PhotoPath;
}

<p>Posted by @Model.Post.UserName - @Model.Post.TimePosted</p>

<img class="card-img-top" src=@photoPath asp-append-version="true" />

<h6 style="margin-top: 40px">Comments</h6>

<form asp-action="PostComment" method="post">
    <input type="hidden" name="Post.Id" value=@Model.Post.Id />
    @{
        try
        {
            var user = await userManager.GetUserAsync(User);
            <input type="hidden" name="UserName" value=@user.UserName />
        }
        catch (Exception e)
        {

        }
    }
    <div class="form-group">
        <div class="input-group-append">
            <input  placeholder="Add a comment" class="form-control" name="newCommentContent" required />
            <button type="submit" class="btn btn-outline-secondary">Post</button>
        </div>
        <span asp-validation-for="newCommentContent" class="text-danger"></span>
    </div>
</form>

<!--
    send query to microservice with post ID along protobuff
    if microservice returns HTML for how comments are to be displayed,
    render here
-->

@functions {
    void Render(Comment parent, int depth)
    {
        string offset = "";

        for (int i = 0; i < depth; i++)
        {
            offset += "-";
        }

        <p style="margin-left:@(depth)px; margin-bottom: 3px; padding-bottom: 0px; color: #808080;">@parent.UserName</p>
        <p style="margin-left:@(depth)px">@parent.Content</p>

        foreach (var comment in Model.Comments)
        {
            if (!string.IsNullOrEmpty(comment.ParentId))
            {
                if (comment.ParentId.Equals(parent.Id))
                {
                    Render(comment, depth + 30);
                }
            }
        }
    }

}

@foreach (var comment in Model.Comments)
{
    if (string.IsNullOrEmpty(comment.ParentId))
    {
        Render(comment, 0);
    }
}
